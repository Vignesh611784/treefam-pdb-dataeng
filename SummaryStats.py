# -*- coding: utf-8 -*-
"""SummaryStatsNew.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Py31QgH-OZMw_EpWNGCaBwEqk956_EgK
"""

#Import libraries
import numpy as np
import pandas as pd
from google.colab import drive

#Since I used google colab for this code, the next eight lines have to be changed
drive.mount('/content/drive/',force_remount=True)
!cp drive/My\ Drive/Colab\ Notebooks/'sequences.txt' .
!cp drive/My\ Drive/Colab\ Notebooks/'TF101001.aa.fasta' .
!cp drive/My\ Drive/Colab\ Notebooks/'TF101001.aa.fasta copy' .
!cp drive/My\ Drive/Colab\ Notebooks/'TF101001.aa.fasta copy 3' .
!cp drive/My\ Drive/Colab\ Notebooks/'TF101001.aa.fasta copy 4' .
!cp drive/My\ Drive/Colab\ Notebooks/'TF101001.aa.fasta copy 5' .
!cp drive/My\ Drive/Colab\ Notebooks/'treefam9.protein.alltrees.orthoxml.xml' .

input = open('sequences.txt',mode = 'r')

#Imports AlignIO from the Bio package to open the multiple sequence allignment file
!pip install Bio
from Bio import AlignIO

from Bio import SeqIO
#Opens the file, SUMMARY.txt, in write mode
outDataFile = open('SUMMARY.txt',mode = 'w')
outDataFile.write('SUMMARY STATISTICS')

#Returns the number of proteins in the data
def numProtein(data):
  return len(data)

#Returns the mean, median, standard deviation, max and min of the columns and rows as a tuple
def AlignmentStats(data):
  #Replaces '-' with Nan and removes the last column
  data.replace('-', np.nan, inplace=True)

  #Replace NaNs with 0s and other values with 1s
  binarydata = data.notna().astype(int)

  #Calculate the sum of each row and column
  row_sums = binarydata.sum(axis=1)
  column_sums = binarydata.sum(axis=0)

  var1 = stats(row_sums)
  var2 = stats(column_sums)
  return var1,var2

#Returns the mean, median, standard deviation, max and min of a dataset
def stats(dataset):
  numVal = np.array(dataset)
  meanVal = np.mean(numVal)
  medianVal = np.median(numVal)
  stdVal = np.std(numVal)
  maxVal = np.max(numVal)
  minVal = np.min(numVal)
  return meanVal,medianVal,stdVal,maxVal,minVal

#Prints the mean, median, standard deviation, max and min of a dataset
def printStats(var):
  outDataFile.write('     - Mean : ' + str(var[0])+'\n')
  outDataFile.write('     - Median : ' + str(var[1])+'\n')
  outDataFile.write('     - Standard Deviation : ' + str(var[2])+'\n')
  outDataFile.write('     - Max : ' + str(var[3])+'\n')
  outDataFile.write('     - Min : ' + str(var[4])+'\n')

from scipy.stats import entropy
#Finds the column Entropy from the dataFrame and finds the mean, median, standard deviation, max, min
def perColEntropy(data):
  value_counts_dict = data.apply(pd.Series.value_counts)
  value_counts_dict.replace(np.nan,0.0,inplace=True)
  num = entropy(value_counts_dict,base=20)
  var = stats(num)
  outDataFile.write(' - Entropy Data\n')
  printStats(var)


numFamily = 0 #Keeps count of the number of families
proteinRecord = [record.id for record in SeqIO.parse('TF101001.aa.fasta', "fasta")] #The protein names
proteinval = [] #The number of proteins for each of the families
MSAval = [] #The MSA widths for each of the families
while True:
  #Reading each of the names of the files
  line = input.readline()
  if not line:
    break
  line = line.strip()
  familynames = line.split('.')[0] #Getting the family names from the title of the file
  sequences = list(SeqIO.parse(line, "fasta")) #Gets the sequences for each of the protein families
  data = pd.DataFrame(sequences)
  val = AlignmentStats(data)
  proteinval.append(numProtein(data)) #Appends the number of proteins in the family to proteinval
  MSAval.append(val[0][3]) #Appends the MSA maximum width per family to proteinval
  numFamily = numFamily+1
  outDataFile.write('\nFor family '+str(familynames))
  outDataFile.write('\n - Number of proteins: '+str(numProtein(data)))

  #Alignment statistics for the data in each family
  value = AlignmentStats(data)

  outDataFile.write('\n - Maximum width of MSA: '+ str(value[0][3]))
  outDataFile.write('\n - Alignment sizes \n')
  outDataFile.write('   - Rows\n')
  printStats(value[0])
  outDataFile.write('   - Columns\n')
  printStats(value[1])

  perColEntropy(data) #Gives entropy data for each family

#Returns the version of the tree used
def versionInfo(file_path):
  versionArr = None
  with open(file_path, 'r') as file:
    lines = file.readlines()
    for line in lines:
      if line.startswith('#') or line.startswith(';') or line.startswith('<'):
        if 'version' in line.lower():
          versionArr = line.strip()
  return versionArr

input.close()
#Prints the necessary details to the file
outDataFile.write('\n')
valuesInfo = versionInfo('treefam9.protein.alltrees.orthoxml.xml')
outDataFile.write('Version: '+str(valuesInfo))
outDataFile.write('\n\n')
outDataFile.write('Number of families: '+str(numFamily))
outDataFile.write('\n')
outDataFile.write(' - Protein Data per Family\n')
var = stats(proteinval)
printStats(var)
outDataFile.write(' - MSA Data per Family\n')
var = stats(MSAval)
printStats(var)
outDataFile.close()
!cp 'SUMMARY.txt' drive/My\ Drive/Colab\ Notebooks/

import csv
import requests
#Reads the Multiple Sequence Alignment files
def readTreeFam(name):
    proteins = set()
    for record in SeqIO.parse(name, "fasta"):
        proteins.add(record.id)
    return proteins

#Retrieves the pdb file from the internet in response and gets the PDB ID for the inputted protein name
def queryForProtein(protein):
    url = f"https://www.ebi.ac.uk/pdbe/api/mappings/uniprot/{protein}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        pdbID = data.get(protein, {}).get('PDB', {}).keys()
        return list(pdbID)
    else:
        return []

#Maps each protein to a PDB ID and returns a dictionary
def generateNames(treeFamProteins):
    pdbNames = {}
    for protein in treeFamProteins:
        pdbID = queryForProtein(protein)
        if pdbID:
            pdbNames[protein] = pdbID
    return pdbNames

#Saves the names in a csv file
def saveNames(pdbNames, outputFile):
    with open(outputFile, 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['TreeFam Protein', 'PDB Names'])
        for protein, pdbID in pdbNames.items():
            writer.writerow([protein, ', '.join(pdbID)])

treeFamFile = 'TF101001.aa.fasta'
outputFileName = 'nameMappings.csv'

# Read TreeFam proteins
proteinNamesT = readTreeFam(treeFamFile)
pdbNames = generateNames(proteinNamesT)

# Save PDB names
saveNames(pdbNames, outputFileName)

print(f"TreeFam to PDB name mappings saved to {outputFileName}")
!cp 'nameMappings.csv' drive/My\ Drive/Colab\ Notebooks/